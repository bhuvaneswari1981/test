version: 0.2

env:
  git-credential-helper: yes

phases:
  install:
    on-failure: ABORT
    runtime-versions:
      python: 3.13
      nodejs: 22
    commands:
      - chmod +x ~
      - export AWS_CDK_LIB_VERSION="2.190.0"
      - export AWS_CDK_CLI_VERSION="2.1017.1"
      - export CONSTRUCTS_VERSION="10.3.0"
      - export PYENV_ROOT="$HOME/.pyenv"
      - export PATH="$PYENV_ROOT/bin:$PATH"
      - export PIPENV_PYTHON="$PYENV_ROOT/shims/python"
      
      - npm cache clean --force
      - npm set strict-ssl false
      - npm config list
      # Install AWS CDK CLI and AWS CDK libraries
      - npm install --location=global aws-cdk@$AWS_CDK_CLI_VERSION
      - pip install aws-cdk-lib==$AWS_CDK_LIB_VERSION
      - pip install constructs==$CONSTRUCTS_VERSION
      #install jq
      - wget -nv -O /usr/local/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux64
      - chmod u+rwx,g+rx,o+rx /usr/local/bin/jq
      - jq --version
      - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      - chmod a+x /usr/local/bin/yq
      - yq --version

  pre_build:
    commands:
      - adduser -m jenkins
      - chown -R jenkins:jenkins /home/jenkins
      - export PATH="/home/jenkins/.local/bin:$PATH"
      - export CONFIG_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      
      # CDK Version Compatibility Checks
      - echo "Checking CDK and Constructs version compatibility..."
      - pip check
      - python -c "import aws_cdk_lib; print(f'CDK Library Version: {aws_cdk_lib.__version__}')"
      - python -c "import constructs; print(f'Constructs Version: {constructs.__version__}')"
      - cdk --version
      - |
        #!/bin/bash
        # Validate version compatibility using predefined environment variables
        echo "Expected CDK CLI Version: $AWS_CDK_CLI_VERSION"
        echo "Expected CDK Library Version: $AWS_CDK_LIB_VERSION"
        echo "Expected Constructs Version: $CONSTRUCTS_VERSION"
        
        # Verify installed versions match expected versions
        INSTALLED_CLI_VER=$(cdk --version | grep -oP '\d+\.\d+\.\d+')
        INSTALLED_LIB_VER=$(python -c "import aws_cdk_lib; print(aws_cdk_lib.__version__)")
        INSTALLED_CONSTRUCTS_VER=$(python -c "import constructs; print(constructs.__version__)")
        
        echo "Installed CDK CLI Version: $INSTALLED_CLI_VER"
        echo "Installed CDK Library Version: $INSTALLED_LIB_VER"
        echo "Installed Constructs Version: $INSTALLED_CONSTRUCTS_VER"
        
        # Check if installed versions match expected versions
        if [ "$INSTALLED_CLI_VER" != "$AWS_CDK_CLI_VERSION" ]; then
          echo "ERROR: Expected CDK CLI v$AWS_CDK_CLI_VERSION but found v$INSTALLED_CLI_VER"
          exit 1
        fi
        
        if [ "$INSTALLED_LIB_VER" != "$AWS_CDK_LIB_VERSION" ]; then
          echo "ERROR: Expected CDK Library v$AWS_CDK_LIB_VERSION but found v$INSTALLED_LIB_VER"
          exit 1
        fi
        
        if [ "$INSTALLED_CONSTRUCTS_VER" != "$CONSTRUCTS_VERSION" ]; then
          echo "ERROR: Expected Constructs v$CONSTRUCTS_VERSION but found v$INSTALLED_CONSTRUCTS_VER"
          exit 1
        fi
        
        # Function to compare version numbers (returns 0 if v1 >= v2, 1 if v1 < v2)
        version_compare() {
          local v1=$1
          local v2=$2
          # Convert versions to comparable format (remove dots, pad with zeros)
          local v1_num=$(echo $v1 | awk -F. '{printf("%03d%03d%03d", $1, $2, $3)}')
          local v2_num=$(echo $v2 | awk -F. '{printf("%03d%03d%03d", $1, $2, $3)}')
          
          if [ "$v1_num" -ge "$v2_num" ]; then
            return 0  # v1 >= v2
          else
            return 1  # v1 < v2
          fi
        }
        
        # Now validate compatibility between the expected versions
        CLI_MAJOR_MINOR=$(echo $AWS_CDK_CLI_VERSION | cut -d. -f1,2)
        LIB_MAJOR_MINOR=$(echo $AWS_CDK_LIB_VERSION | cut -d. -f1,2)
        CONSTRUCTS_MAJOR=$(echo $CONSTRUCTS_VERSION | cut -d. -f1)
        
        # Check CDK CLI vs Library compatibility
        if [ "$CLI_MAJOR_MINOR" != "$LIB_MAJOR_MINOR" ]; then
          echo "ERROR: CDK CLI v$AWS_CDK_CLI_VERSION and Library v$AWS_CDK_LIB_VERSION major.minor versions don't match!"
          echo "CDK CLI major.minor: $CLI_MAJOR_MINOR, Library major.minor: $LIB_MAJOR_MINOR"
          exit 1
        fi
        
        # Check CLI release date >= Library release date (CLI should be same or newer)
        if ! version_compare "$AWS_CDK_CLI_VERSION" "$AWS_CDK_LIB_VERSION"; then
          echo "ERROR: CDK CLI version ($AWS_CDK_CLI_VERSION) is older than Library version ($AWS_CDK_LIB_VERSION)"
          echo "CLI should be same version or newer than the Library to ensure compatibility"
          echo "Recommendation: Update CLI to match or exceed Library version"
          exit 1
        fi
        
        # Check CDK Library vs Constructs compatibility
        # CDK v2.x requires constructs v10.x
        if [[ "$AWS_CDK_LIB_VERSION" =~ ^2\. ]]; then
          if [ "$CONSTRUCTS_MAJOR" != "10" ]; then
            echo "ERROR: CDK Library v2.x ($AWS_CDK_LIB_VERSION) requires constructs v10.x, but configured for v$CONSTRUCTS_VERSION"
            echo "Please update CONSTRUCTS_VERSION to 10.x.x"
            exit 1
          fi
        fi
        
        echo "✓ All versions match expected values and are compatible"
        echo "✓ CLI version ($AWS_CDK_CLI_VERSION) >= Library version ($AWS_CDK_LIB_VERSION)"
      
      - |
        #!/bin/bash
        echo "jenkins ALL=(ALL) NOPASSWD: ALL" | tee -a /etc/sudoers
        declare -A envmap=(
          ["beta"]="PED_SBX"
          ["hdsodev"]="HDSO_DEV"
          ["dev"]="PED_DEV"
          ["hdsotest"]="HDSO_TEST"
          ["eretest"]="PED_ERETEST"
          ["ecltest"]="PED_ECLTEST"
          ["eeltest"]="PED_EELTEST"
          ["test"]="PED_TEST"
          ["hotfixdev"]="PED_HFDEV"
          ["hotfixtest"]="PED_HFTEST"
          ["hdsoprep"]="HDSO_PREP"
          ["preprod"]="PED_NPROD"
          ["hdsoprod"]="HDSO_PROD"
          ["prod"]="PED_PROD"
          ["pte"]="PED_PTE"
          ["hfpte"]="PED_HFPTE"
          ["hdsopte"]="HDSO_PTE"
        )
        export env_dir=${envmap[$APP_ENV]}
        echo "env_dir is ${env_dir}"
      - export CONFIG_REPO=$(echo $CODEBUILD_SOURCE_REPO_URL)
      - export ansible_deploy_file=$CODEBUILD_SRC_DIR/environments/$env_dir/group_vars/all/ansible_deploy.yml
      - echo devops commit $CONFIG_VERSION
      - echo config_repo $CONFIG_REPO
      - |
        #!/bin/bash
        #Read the YAML file and convert it to JSON using 'yq' and 'jq' tools
        echo "set match = ${RUN_VARIABLE}"
        json=$(match=${RUN_VARIABLE} yq '.[env(match)] | tojson' $ansible_deploy_file)
        echo $json

        echo "Set each key-value pair as an environment variable"
        while IFS== read -r key value; do
          export "$key"="$value"
        done < <(echo "$json" | jq -r 'to_entries[] | "\(.key)=\(.value)"')

        #To check the env vars, print the env
        #printenv

      - |
        #!/bin/bash
        IFS=, read -ra roles <<< "$ansible_roles"
        declare -A ar_versions=()
        for _role in "${roles[@]}"
        do
          role="${_role// /}"
          branch_var=${role}_branch
          git_hash=''
          if [[ -n "${!branch_var}" ]]; then
            echo "${branch_var} branch: ${!branch_var}"
            git clone $DOVA_GH/ansible-role-$role --branch "${!branch_var}" "$CODEBUILD_SRC_DIR/roles/ansible-role-$role";
          else
            git clone $DOVA_GH/ansible-role-$role "$CODEBUILD_SRC_DIR/roles/ansible-role-$role";
          fi
          pwd
          pushd "$CODEBUILD_SRC_DIR/roles/ansible-role-$role"
          git_hash=$(git rev-parse HEAD | cut -c 1-7)
          ar_versions[$role]=$git_hash
          popd
          pwd
          echo "ansible-role-$role, commit id $git_hash"
        done
        for key in "${!ar_versions[@]}"; do
           ansible_role_versions+=$(echo "$key: ${ar_versions[$key]},")
        done
        export ansible_role_versions=${ansible_role_versions%,}
        
  build:
    run-as: jenkins
    on-failure: ABORT
    commands:
      - echo Build started on `date`
      - whoami
      - export HOME=/home/jenkins
      - export ANSIBLE_CONFIG=$CODEBUILD_SRC_DIR/playbooks/ansible.cfg
      - aws --version
      - python -m pip install --user -r $CODEBUILD_SRC_DIR/scripts/python/requirements.txt
      
      # Additional pip check after installing requirements
      - pip check
      
      - cd $CODEBUILD_SRC_DIR
      - export ansible_command="ansible-playbook $CODEBUILD_SRC_DIR/playbooks/$ansible_playbook"
      - export inventory_file=$CODEBUILD_SRC_DIR/environments/$env_dir/inventory
      - export ANSIBLE_HOST_KEY_CHECKING=False
      - export extra_args="var_hosts=$HOST aws_config_path=/tmp/config"
