#!/bin/bash
#
# EDIGW user script
# Version 1.0 - 2024-06-11 LB - Original Attempt

########################################
# NOTES:
#   This script typically has no arguments, however options can be
#   specified on the command line
########################################
# Process Command Line
# - This script has 1 positional argument: a config file that describes the
#   actions that are to be taken. The config file must be processed BEFORE
#   the command-line options so that the command-line overrides the config
# - Local variables can be overridden by being set on the command line
#   For example:
#     DEBUG=1 on the command line will override the default DEBUG value
########################################
# Validate command line argument
########################################
CLINE="$*"
# Loop over any variables
while [[ $# -gt 0 ]] ; do
  OPT="$1"
  # Options without an = are set to 1
  [[ "$OPT" == *"="* ]] || OPT="$OPT=1"
  export $OPT
  shift
done
########################################
# Process Default Variables
########################################
[[ -z "$EDICONF" ]]   && EDICONF={{ edigw_base | default('/opt/EDIGateway') }}/conf
[[ -z "$EDIBIN" ]]    && EDIBIN={{ edigw_base | default('/opt/EDIGateway') }}/bin
[[ -z "$EDIAZCOPY" ]] && EDIAZCOPY="${EDIBIN}/edigw-azcopy.sh"
[[ -z "$EDICOPY" ]]   && EDICOPY="${EDIBIN}/edigw-copy.sh"
[[ -z "$EDICURL" ]]   && EDICURL="${EDIBIN}/edigw-curl.sh"
[[ -z "$EDISFTP" ]]   && EDISFTP="${EDIBIN}/edigw-sshfs.sh"
[[ -z "$DEBUG" ]]     && do_print_debug_msgs=0
[[ -n ${DEBUG} ]]     && do_print_debug_msgs=1

scriptname=$(basename $0)
ME=$(basename $0 | sed 's/edigw-//;s/\.sh$//')

[[ -z "$RUNAS" ]]   && RUNAS=vaiedi

# EXPORT The LOGFILE to sub-scripts all use it!
[[ -z "$LOGFILE" ]] && export LOGFILE="{{ edigw_local_logs | default ('/var/log/EDIGateway') }}/${ME}.log"

echo $(printf '=%.0s' {1..80}) | tee -a "${LOGFILE}"

#source the commonfunctions
. "${0%/*}/commonfunctions.sh"

########################################
# Configure Logging
########################################
configureLogging "${LOGFILE}"

doLog "DEBUG [${scriptname}] Debugging is enabled"
doLog "INFO [${scriptname}] $RUNAS processing from ${HOSTNAME: 5:3} ${HOSTNAME: 11:3}"

########################################
# Validate user
########################################
validateUser "${RUNAS}"

########################################
# build ${RUN} to act as a semaphore: to prevent the script from running
#  multiple times with the exact same options
########################################
RUN="/tmp/${ME}.sem"

if [[ -f "${RUN}" ]] ; then             # Check Semaphore Status
  doLog "INFO [${scriptname}] Semaphore ${RUN} already exists. Exiting non-re-entrant script"
  echo $(printf '=%.0s' {1..80}) | tee -a "${LOGFILE}"
  exit 5
else                                    # Establish semaphore
  touch "${RUN}"
  doLog "DEBUG [${scriptname}] Semaphore File ${RUN} created"
fi # end semaphore checking

########################################
# Start processing
########################################
doLog "DEBUG [${scriptname}] cd into $EDICONF"
if ! cd "${EDICONF}" 2> /dev/null ; then
  doLog "ERROR [${scriptname}] Failed to set CWD to $EDICONF"
  rm -f "${RUN}"
  exit 1
fi
########################################
# Process files for ${RUNAS}
# will be one of sftp, curl, azcopy, or copy
# if not specified, will be copy
########################################
for i in ${RUNAS}-*.conf ; do
  #TYPE="`echo $i | sed s/${RUNAS}-//\;s/-copy\.conf//`"
  type="$(awk -F '=' '/TYPE/ {print $2}' $i)"
  action=$(toLower "$type")
  doLog "DEBUG [${scriptname}] processing ${i} using ${action}"
  case $action in
    azcopy)
      doLog "DEBUG [${scriptname}] calling ${EDIAZCOPY} $i"
      "${EDIAZCOPY}" "$i"
      ;;
    sftp)
      doLog "DEBUG [${scriptname}] calling ${EDISFTP}"
      if ! "${EDISFTP}" mount 2> /dev/null; then
        doLog "ERROR [${scriptname}] Failed to mount SFTP for user ${ME}, exit"
        rm -f "${RUN}"
        exit 1
      fi
      doLog "DEBUG [${scriptname}] calling ${EDICOPY} $i"
      "${EDICOPY}" "$i"
      ;;
    curl)
      doLog "DEBUG [${scriptname}] calling ${EDICURL} $i"
      "${EDICURL}" "$i"
      ;;
    *)
      doLog "DEBUG [${scriptname}] calling default ${EDICOPY} $i"
      "${EDICOPY}" "$i"
      ;;
  esac
done # done working config files

if [[ "${action}" == "sftp" ]]; then
  if ! "${EDISFTP}" unmount 2> /dev/null; then
    doLog "WARN [${scriptname}] Failed to unmount SFTP for user ${ME}"
  fi
fi

rm -f "${RUN}"
doLog "INFO [${scriptname}] $RUNAS Completed processing cycle"
exit 0
