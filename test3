version: 0.2

env:
  git-credential-helper: yes

phases:
  install:
    on-failure: ABORT
    runtime-versions:
      python: 3.13
      nodejs: 22
    commands:
      - export AWS_CDK_LIB_VERSION="2.190.0"
      - export AWS_CDK_CLI_VERSION="2.1017.1"
      - export CONSTRUCTS_VERSION="10.3.0"
      - export PYENV_ROOT="$HOME/.pyenv"
      - export PATH="$PYENV_ROOT/bin:$PATH"
      - export PIPENV_PYTHON="$PYENV_ROOT/shims/python"

      - npm install -g aws-cdk@$AWS_CDK_CLI_VERSION
      - pip install aws-cdk-lib==$AWS_CDK_LIB_VERSION constructs==$CONSTRUCTS_VERSION

      - wget -qO /usr/local/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux64
      - chmod +x /usr/local/bin/jq

      - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      - chmod +x /usr/local/bin/yq

  pre_build:
    commands:
      - adduser -m jenkins && chown -R jenkins:jenkins /home/jenkins
      - export PATH="/home/jenkins/.local/bin:$PATH"
      - export CONFIG_VERSION=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)

      - |
        echo "Checking CDK version compatibility..."
        CLI_VER=$(cdk --version | grep -oP '\d+\.\d+\.\d+')
        LIB_VER=$(python -c "import aws_cdk_lib; print(aws_cdk_lib.__version__)")
        CONSTRUCTS_VER=$(python -c "import constructs; print(constructs.__version__)")

        echo "Installed: CLI=$CLI_VER, LIB=$LIB_VER, CONSTRUCTS=$CONSTRUCTS_VER"
        [ "$CLI_VER" = "$AWS_CDK_CLI_VERSION" ] || { echo "CDK CLI version mismatch"; exit 1; }
        [ "$LIB_VER" = "$AWS_CDK_LIB_VERSION" ] || { echo "CDK Lib version mismatch"; exit 1; }
        [ "$CONSTRUCTS_VER" = "$CONSTRUCTS_VERSION" ] || { echo "Constructs version mismatch"; exit 1; }

        # Validate CLI >= LIB
        compare_versions() {
          v1=$(echo "$1" | awk -F. '{printf("%03d%03d%03d", $1,$2,$3)}')
          v2=$(echo "$2" | awk -F. '{printf("%03d%03d%03d", $1,$2,$3)}')
          [ "$v1" -ge "$v2" ]
        }
        compare_versions "$AWS_CDK_CLI_VERSION" "$AWS_CDK_LIB_VERSION" || {
          echo "CDK CLI must be >= Library version"; exit 1;
        }

        [[ "$AWS_CDK_LIB_VERSION" =~ ^2\. ]] && [ "${CONSTRUCTS_VERSION%%.*}" != "10" ] && {
          echo "CDK v2.x requires Constructs v10.x"; exit 1;
        }

      - echo "jenkins ALL=(ALL) NOPASSWD: ALL" | tee -a /etc/sudoers

      - |
        declare -A envmap=(
          ["beta"]="PED_SBX" ["hdsodev"]="HDSO_DEV" ["dev"]="PED_DEV"
          ["hdsotest"]="HDSO_TEST" ["eretest"]="PED_ERETEST" ["ecltest"]="PED_ECLTEST"
          ["eeltest"]="PED_EELTEST" ["test"]="PED_TEST" ["hotfixdev"]="PED_HFDEV"
          ["hotfixtest"]="PED_HFTEST" ["hdsoprep"]="HDSO_PREP" ["preprod"]="PED_NPROD"
          ["hdsoprod"]="HDSO_PROD" ["prod"]="PED_PROD" ["pte"]="PED_PTE" ["hfpte"]="PED_HFPTE"
          ["hdsopte"]="HDSO_PTE"
        )
        export env_dir=${envmap[$APP_ENV]}
        export CONFIG_REPO=$CODEBUILD_SOURCE_REPO_URL
        export ansible_deploy_file=$CODEBUILD_SRC_DIR/environments/$env_dir/group_vars/all/ansible_deploy.yml

      - |
        json=$(RUN_VARIABLE=$RUN_VARIABLE yq '.[env(RUN_VARIABLE)] | tojson' $ansible_deploy_file)
        while IFS== read -r key value; do export "$key"="$value"; done < <(echo "$json" | jq -r 'to_entries[] | "\(.key)=\(.value)"')

      - |
        IFS=, read -ra roles <<< "$ansible_roles"
        declare -A ar_versions
        for role in "${roles[@]}"; do
          clean_role="${role// /}"
          branch_var=${clean_role}_branch
          clone_branch="${!branch_var:-main}"
          git clone $DOVA_GH/ansible-role-$clean_role --branch "$clone_branch" "$CODEBUILD_SRC_DIR/roles/ansible-role-$clean_role"
          pushd "$CODEBUILD_SRC_DIR/roles/ansible-role-$clean_role" >/dev/null
          ar_versions[$clean_role]=$(git rev-parse --short HEAD)
          popd >/dev/null
        done
        export ansible_role_versions=$(IFS=,; for r in "${!ar_versions[@]}"; do echo -n "$r: ${ar_versions[$r]},"; done | sed 's/,$//')

  build:
    run-as: jenkins
    on-failure: ABORT
    commands:
      - echo "Build started on $(date)"
      - export HOME=/home/jenkins
      - export ANSIBLE_CONFIG=$CODEBUILD_SRC_DIR/playbooks/ansible.cfg
      - python -m pip install --user -r $CODEBUILD_SRC_DIR/scripts/python/requirements.txt
      - pip check
      - cd $CODEBUILD_SRC_DIR
      - export ansible_command="ansible-playbook $CODEBUILD_SRC_DIR/playbooks/$ansible_playbook"
      - export inventory_file=$CODEBUILD_SRC_DIR/environments/$env_dir/inventory
      - export ANSIBLE_HOST_KEY_CHECKING=False
      - export extra_args="var_hosts=$HOST aws_config_path=/tmp/config"
