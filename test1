# pylint: disable=redefined-builtin,f-string-without-interpolation,too-many-positional-arguments,no-else-return
import os
from aws_cdk import (
  Stack,
  NestedStack,
  App,
  Environment,
  CfnOutput,
  Fn,
  DefaultStackSynthesizer
)
from common.utility.paramstore_util import ParamStoreUtil
from common.lambdas.layers.default.custom_logger import logger

def get_export_name(export_name, resource_type):
  export_name = export_name.replace("-", "").replace("_", "")
  if resource_type == "AWS::Batch::JobDefinition":
    return f"{export_name}job"
  elif resource_type == "AWS::StepFunctions::StateMachine":
    return f"{export_name}sfn"
  elif resource_type == "AWS::Lambda::Function":
    return f"{export_name}lambda"
  elif resource_type == "AWS::ElasticLoadBalancingV2::LoadBalancer":
    return f"{export_name}loadbalancer"
  else:
    return export_name

def set_stack_output(scope, id, value, export_name, resource_type=None):
  CfnOutput(scope, id, value=value, export_name=get_export_name(export_name, resource_type))

def import_stack_export(export_name, resource_type=None):
  return Fn.import_value(get_export_name(export_name, resource_type))

def stack_synthesizer(env):
  iam_arn = f"arn:${{AWS::Partition}}:iam::${{AWS::AccountId}}:role/project"
  project_env = f"project-{env}"
  logger.info("env: %s, project_env %s", env, project_env)
  synthesizer=DefaultStackSynthesizer(
    qualifier=env,
    file_assets_bucket_name=f"cdktoolkit-stagingbucket-{env}",
    image_assets_repository_name="cdk-{project_env}-container-assets",
    deploy_role_arn=f"{iam_arn}/{project_env}-ped-cdk-deploy-role",
    file_asset_publishing_role_arn=f"{iam_arn}/{project_env}-ped-cdk-file-publishing-role",
    image_asset_publishing_role_arn=f"{iam_arn}/{project_env}-ped-cdk-image-publishing-role",
    cloud_formation_execution_role=f"{iam_arn}/{project_env}-ped-cdk-cfn-exec-role",
    lookup_role_arn=f"{iam_arn}/{project_env}-ped-cdk-lookup-role",
    bootstrap_stack_version_ssm_parameter=f"/cdk-bootstrap/{project_env}/version",
    generate_bootstrap_version_rule=True)
  return synthesizer

class PEDStack(Stack):

  def __init__(self, app: App, id: str, ped_config, ped_props, **kwargs) -> None:
    self.ped_config = ped_config
    self.ped_props = ped_props
    self.stack_synthesizer = stack_synthesizer(env=self.ped_props.real_app_env)
    self.cloud_env = Environment(account=str(self.ped_config['aws_account_id']), region=self.ped_config['aws_region'])
    self.logger = logger
    self.add_param_store_config()
    super().__init__(app, id, env=self.cloud_env, synthesizer=self.stack_synthesizer, **kwargs)

  #Override the logical id for root stacks to clean up the stack name and make it less redundant.
  def get_logical_id(self, element):
    logical_id = super().get_logical_id(element)
    if self.ped_props.is_root_stack and 'NestedStackResource' in element.node.id:
      logical_id = element.node.id.split(".")[0].replace("-", "")
    return logical_id

  #Read in the param store files and store them in ped_config as a dictionary to be referenced at stack creation time
  def add_param_store_config(self):
    source_dir = self.ped_props.source_dir
    param_store_path = f"{source_dir}/environments/{self.ped_props.env_dir}/group_vars/all/param-store"
    if not os.path.exists(param_store_path):
      logger.info("%s does not exist, moving on",param_store_path)
      return
    for file in os.scandir(param_store_path):
      if "-template" not in file.name:
        transaction_name = file.name.split(".")[0]
        paramstore_path = f"{param_store_path}/{transaction_name}.json"
        flattened_json = ParamStoreUtil.flatten_json(paramstore_path, f"/{self.ped_props.app_env}/")
        self.ped_config[f"{transaction_name}-param-store"] = flattened_json

  def set_stack_output(self, scope, id, value, export_name, resource_type=None):
    set_stack_output(scope, id, value, export_name, resource_type)

  def import_stack_export(self, export_name, resource_type=None):
    return import_stack_export(export_name, resource_type)

class PEDNestedStack(NestedStack):

  def __init__(self, app: App, id: str, ped_config, ped_props, **kwargs) -> None:
    self.ped_config = ped_config
    self.ped_props = ped_props
    self.logger = logger
    super().__init__(app, id, **kwargs)

  def set_stack_output(self, scope, id, value, export_name, resource_type=None):
    set_stack_output(scope, id, value, export_name, resource_type)

  def import_stack_export(self, export_name, resource_type=None):
    return import_stack_export(export_name, resource_type)
   
