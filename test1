- name: promoteBuildArtifact | Promote each artifact from develop to {{ target_branch }}
  block:
    # First ensure we have everything up to date
    - name: Make sure git repo is up to date
      ansible.builtin.shell: |
        git fetch --all
        git reset --hard origin/{{ target_branch }}
      args:
        chdir: "{{ destination_directory }}/{{ github_repo_name }}"
      tags: skip_ansible_lint
      
    # Debug what files we're trying to release
    - name: Debug files to release  
      debug:
        msg: "Will process {{ files_to_release | length }} files: {{ files_to_release | map(attribute='filename') | list }}"

    # Process each artifact individually
    - name: Process artifacts individually
      loop: "{{ files_to_release }}"
      loop_control:
        label: "{{ item.filename }}"
      block:
        - name: Set artifact details
          ansible.builtin.set_fact:
            current_artifact: "{{ item.artifact_folder }}/{{ item.filename }}"
            commit_message: "Promoting {{ item.artifact_folder }}/{{ item.filename }} for {{ tag_name }} at {{ lookup('pipe', 'date -u +%Y-%m-%d_%H:%M:%S') }}"
            
        - name: Show which artifact we're processing
          ansible.builtin.debug:
            msg: "Processing artifact: {{ current_artifact }}"
        
        - name: Check if artifact exists in develop branch
          ansible.builtin.shell: |
            git ls-tree -r origin/develop --name-only | grep -c "{{ current_artifact }}" || echo "0"
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: artifact_exists
          changed_when: false
          
        - name: Fail if artifact doesn't exist
          ansible.builtin.fail:
            msg: "Artifact {{ current_artifact }} not found in develop branch!"
          when: artifact_exists.stdout == "0"
        
        - name: Checkout the specific artifact from develop
          ansible.builtin.shell: |
            git checkout origin/develop -- "{{ current_artifact }}"
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: checkout_result
          failed_when: checkout_result.rc != 0
          
        - name: Check if artifact was modified
          ansible.builtin.shell: |
            git status --porcelain "{{ current_artifact }}"
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: status_result
          changed_when: false
        
        - name: Display status
          ansible.builtin.debug:
            msg: "Status of {{ current_artifact }}: {{ status_result.stdout }}"
          
        - name: Commit the artifact with descriptive message
          ansible.builtin.shell: |
            git add "{{ current_artifact }}"
            git commit -m "{{ commit_message }}"
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: commit_result
          failed_when: commit_result.rc != 0 and "nothing to commit" not in commit_result.stderr and "nothing added to commit" not in commit_result.stderr
          changed_when: commit_result.rc == 0 and "nothing to commit" not in commit_result.stderr and "nothing added to commit" not in commit_result.stderr
        
        - name: Display commit result
          ansible.builtin.debug:
            msg: "{{ commit_result.stdout_lines | default([]) + commit_result.stderr_lines | default([]) }}"
        
        - name: Push changes immediately after commit
          ansible.builtin.shell: |
            # Try to push
            if ! git push origin {{ target_branch }}; then
              echo "Push failed, pulling latest changes and trying again"
              git pull --rebase origin {{ target_branch }}
              git push origin {{ target_branch }}
            fi
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: push_result
          failed_when: push_result.rc != 0
          
        - name: Display push result
          ansible.builtin.debug:
            msg: "{{ push_result.stdout_lines | default([]) + push_result.stderr_lines | default([]) }}"
        
        - name: Verify the artifact exists in remote
          ansible.builtin.shell: |
            git fetch origin {{ target_branch }}
            git ls-tree -r origin/{{ target_branch }} -- "{{ current_artifact }}" | wc -l
          args:
            chdir: "{{ destination_directory }}/{{ github_repo_name }}"
          register: verify_result
          failed_when: verify_result.stdout.strip() == "0"
          
        - name: Display verification status
          ansible.builtin.debug:
            msg: "Verification of {{ current_artifact }} in remote: {{ 'SUCCESS' if verify_result.stdout.strip() != '0' else 'FAILED' }}"
      rescue:
        - name: Handle artifact processing failure
          ansible.builtin.debug:
            msg: "Failed to process artifact {{ current_artifact | default('unknown') }}. See above errors."
          failed_when: true

    # Create and push tag after all artifacts are processed
    - name: Create and push tag
      ansible.builtin.shell: |
        cd "{{ destination_directory }}/{{ github_repo_name }}"
        git fetch --tags
        
        if [ -z "$(git tag -l {{ release_tag }})" ]; then
          echo "Creating tag {{ release_tag }}"
          git tag -a {{ release_tag }} -m "Tagging artifacts with version {{ release_tag }}"
          
          if ! git push origin {{ release_tag }}; then
            echo "Push tag failed, retrying"
            git push origin {{ release_tag }} --force
          fi
        else
          echo "Tag {{ release_tag }} already exists, skipping creation"
        fi
      register: tag_result
      failed_when: tag_result.rc != 0 and 'already exists' not in tag_result.stderr
      tags: skip_ansible_lint
    
    - name: Verify tag exists in remote
      ansible.builtin.shell: |
        git ls-remote --tags origin | grep -c "{{ release_tag }}" || echo "0"
      args:
        chdir: "{{ destination_directory }}/{{ github_repo_name }}"
      register: tag_verify
      failed_when: tag_verify.stdout.strip() == "0"
  rescue:
    - name: Handle overall promotion failure
      ansible.builtin.debug:
        msg: "Failed to promote artifacts to {{ target_branch }}. See above errors."
      failed_when: true
