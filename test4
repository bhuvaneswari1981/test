#!/bin/bash
{% set len = env.split('-') | length %}
{% if len > 1 %}
{% set thisenv = env.split('-')[1] | lower %}
{% else %}
{% set thisenv = 'local' %}
{% endif %}

{% if thisenv == 'prod' %}
{% set profile_opts = '-Dspring.profiles.active=prod' %}
{% else %}
{% set profile_opts = '-Dspring.profiles.active=qa' %}
{% endif %}

OIFS="$IFS"
IFS=$' \t\n\r'

function usage() {
  echo "===== ===== ===== ===== ====="
  echo "usage: $scriptname -i INPUT_TYPE"
  echo "      where INPUT_TYPE = ingest | unmatched | pedmatch | help"
  echo "OPTIONAL arguments: "
  echo "  -l|--logfile logfile"
  echo "  -i|--input ingest | unmatched | pedmatch"
  echo "  -v|--verbose"
  echo "  -h|--help"
  echo "===== ===== ===== ===== ====="
  exit 1
}
###############################################################################
# name: doLog()
# description: pass params and print them to a log file and terminal
#              with  [log level] timestamp msg
#        NOTE: set $do_print_debug_msgs=1 to see debug messages
# usage:
# doLog "INFO [${FUNCNAME[0]}] some info message"
# doLog "DEBUG [${FUNCNAME[0]}] some debug message"
# doLog "WARN [${FUNCNAME[0]}] some warning message"
# doLog "ERROR [${FUNCNAME[0]}] some really ERROR message"
###############################################################################
function doLog() {
    type_of_msg=$(echo $*|cut -d" " -f1)
    msg=$(echo "$*"|cut -d" " -f2-)
    [[ $type_of_msg == DEBUG ]] && [[ $do_print_debug_msgs -ne 1 ]] && return

    # print to the terminal if we have one
    test -t 1 && printf "[%5s] %s %s\n" "$type_of_msg"  "$(date "+%Y.%m.%d-%H:%M:%S %Z")" "$msg"

    printf "[%5s] %s %s\n"  "$type_of_msg" "$(date "+%Y.%m.%d-%H:%M:%S %Z")" "$msg" >> "${LOGGER_PATH}"
}
###############################################################################
# name: ReadArgs()
# reads the command line arguments passed to it
# and populates shell variables accordingly
###############################################################################
ReadArgs() {
  if [[ $# -lt "2" ]]; then
    echo "ERROR ${0} has required arguments, see usage"
    usage
    exit 9
  fi
  while [[ $# -gt 0 ]] ; do
    key="$1"
    case $key in
      -l | --logfile )
           if [[ $# -ge 2 ]] ; then
             LOGFILE="$2"
           else
             echo "Error in $1 argument (no next argument provided)"
             exit 9
           fi
           echo "Log output redirected to ${LOG_DIR}/${LOGFILE}"
           shift # past argument
           shift # past entry
          ;;
      -i | --input )
           if [[ $# -ge 2 ]] ; then
             INPUT_TYPE="$2"
           else
             echo "Error in $1 argument (no next argument provided)"
             exit 9
           fi
           echo "INPUT_TYPE: $INPUT_TYPE"
           shift # past argument
           shift # past entry
           ;;
      -v | --verbose)
           do_print_debug_msgs=1
           echo "Print debug messages"
           shift # past argument
           ;;
      -h | --help )
           usage
           ;;
      * )  echo "ERROR $1 is not a valid argument"
           usage
           exit 9
           ;;
    esac
  done
}

# Script variables
scriptname=${0}
scriptBase="$( cd "$( dirname "$scriptname" )"; pwd)"
ROOT_DIR="$( cd $scriptBase/..;  pwd)"
today=$(date "+%Y%m%d_%H%M%S")
INPUT_TYPE=help
LOG_DIR="${ROOT_DIR}/logs"
if [[ -d /var/log ]]; then
  LOG_DIR="/var/log/ars-parser"
fi

if [[ ! -d ${LOG_DIR} ]]; then
  mkdir -Z ${LOG_DIR}
fi

java_opts=" -Xms512m -Xmx3072m"
java_opts+=" -Dlog4j.configurationFile={{ ars_parser_run_dir }}/log4j2.xml"
java_opts+=" -Dlog4j2.formatMsgNoLookups=true"

parser_opts="-Dspring.config.location={{ ars_parser_run_dir }}/parser.properties"

parser_version=$(unzip -q -c {{ ars_parser_run_dir }}/275generation.jar META-INF/MANIFEST.MF | grep -Ei 'Implementation-Version')

ReadArgs $*

batch_size={{ parser_batch_size | default(5,true) }}

LOGFILE="${INPUT_TYPE}.log"
LOGGER_PATH="${LOG_DIR}/${LOGFILE}"
java_opts+=" -Dlogfile_name=${LOGFILE}"

doLog "DEBUG scriptBase: ${scriptBase}"
doLog "DEBUG ROOT_DIR: ${ROOT_DIR}"
doLog "INFO logging to: ${LOGGER_PATH}"
doLog "INFO Starting ARS 275 Parser ${INPUT_TYPE} for {{ thisenv }} ${today}"
doLog "INFO ${parser_version}"

# set the default folders
incoming={{ ars_default_user_home }}/attachments/incoming
archive={{ ars_default_user_home }}/attachments/archive
# to distinguish new outbound from old ars outbound
outbound={{ ars_default_user_home }}/attachments/275_999_outbound
bad_files={{ ars_default_user_home }}/attachments/bad_files
for_evaluation={{ ars_default_user_home }}/attachments/for_evaluation

mail_from="ars_parser@{{ inventory_hostname }}"
mail_to="{{ ars_parser_email_support |default('OITConfigMgrPED@va.gov') }}"

if [[ ! -d ${bad_files} ]]; then
  mkdir -Z ${bad_files}
fi

cd {{ ars_parser_run_dir }}

if pidof -o %PPID -x "${scriptname}">/dev/null; then
  doLog "ERROR Process already running, stopping"
  exit 1
fi

if [[ $INPUT_TYPE == 'ingest' ]]
then
  doLog "INFO Running INGEST (input_type = (1))"
  doLog "INFO Archive Folder is $archive"
  doLog "INFO Incoming Folder is $incoming"
  doLog "INFO Outbound Folder is $outbound"
  doLog "INFO process files in batches of $batch_size"
  bs=0
  for filename in $(find $incoming -maxdepth 1 -type f ! -name '*.999' ! -name '275.rpt*')
  do
    if [[ $bs -eq $batch_size ]]
    then
      doLog "INFO Finished processing batch"
      break
    fi
    doLog "INFO FOUND INCOMING at $filename"
    file=$(basename $filename)
    doLog "INFO PARSING $file"
    if parse_result=$(java ${java_opts} {{ profile_opts }} ${parser_opts} -jar {{ ars_parser_run_dir }}/275generation.jar -f $file -d $incoming -i1)
    then
      prc="$?"
      doLog "INFO Parsing INCOMING ${file} exited with ${prc}, continue processing"
      doLog "INFO ARCHIVING incoming/$file to $archive/${file}_${today}"
      mv "${filename}" "${archive}/${file}_${today}"
    else
      prc="$?"
      case $prc in
          "1")
            doLog "ERROR ($prc) DB Connection or command parameter error encountered, see ${LOGGER_PATH}"
            doLog "ERROR ($prc) correct the error and rerun the parser"
            ;;
          "2")
            doLog "ERROR ($prc) ARS environment mis-match, move to bad_files"
            mv "${filename}" "${bad_files}/${file}"
            ;;
          "3")
            doLog "ERROR ($prc) X12 Header and/or Trailer file format errors, move to bad_files"
            mv "${filename}" "${bad_files}/${file}"
           ;;
          *)
            doLog "ERROR ($prc) Unexpected return"
            ;;
      esac
      doLog "${parse_result}"
      doLog "ERROR Parsing INCOMING ${file} failed with ${prc}, stop further processing, see ${LOGGER_PATH}"
      subject="ERROR Parsing INCOMING file ${file}"
      body="ERROR Parsing INCOMING ${file} failed with ${prc}, stop further processing, see ${LOGGER_PATH}"
      doLog "INFO send mail to ${mail_to}"
      echo -e "Subject:${subject}\n${body}" | sendmail -f "${mail_from}" -t "${mail_to}"
      continue
    fi
  ((bs++))
  done

  doLog "INFO Processing INCOMING 999"
  for incoming999 in $(find $incoming -maxdepth 1 -type f -name '*.999')
  do
    infile=$(basename $incoming999 .999)
    outfile="${infile}_${today}.999"
    doLog "INFO Copy $incoming999 to ${archive}/${outfile}"
    cp "${incoming999}" "${archive}/${outfile}"
    doLog "INFO MOVING $incoming999 to ${outbound}/${outfile}"
    mv "${incoming999}" "${outbound}/${outfile}"
  done
  doLog "INFO Finshed 999 (input_type = (1))"
  doLog "INFO Finished INGEST (input_type = (1))"

  missed_files=()
  for missed_file in $(find {{ ars_parser_run_dir }} -maxdepth 1 -type f -name '*.pdf')
  do
    doLog "INFO find pdf file which were stored locally"
    doLog "INFO Move ${missed_file} to ${for_evaluation}"
    mv "${missed_file}" "${for_evaluation}/"
    missed_files+=("$missed_file")
  done
{% raw %}
  if (( ${#missed_files[@]} ))
{% endraw %}
  then
    subject="Moved Missed PDF Files"
    file_string="${missed_files[@]}"
    body="The following files were moved to ${for_evaluation}. ${file_string}"
    doLog "INFO send mail to ${mail_to}"
    echo -e "Subject:${subject}\n${body}" | sendmail -f "${mail_from}" -t "${mail_to}"
  fi

elif [[ $INPUT_TYPE == 'unmatched' ]]
then
  doLog "INFO Processing UNMATCHED (input_type = (2))"
  if unmatch_result=$(java ${java_opts} {{ profile_opts }} ${parser_opts} -jar {{ ars_parser_run_dir }}/275generation.jar -i2)
  then
    urc="$?"
    doLog "INFO Parsing UNMATCHED exited with ${urc}, continue processing"
  else
    urc="$?"
    doLog "${unmatch_result}"
    doLog "ERROR Parsing UNMATCHED failed with ${urc}, stop further processing, see ${LOGGER_PATH}"
    subject="ERROR Parsing UNMATCHED "
    body="ERROR Parsing UNMATCHED failed with ${urc}, stop further processing, see ${LOGGER_PATH}"
    doLog "INFO send mail to ${mail_to}"
    echo -e "Subject:${subject}\n${body}" | sendmail -f "${mail_from}" -t "${mail_to}"
    exit $urc
  fi
  doLog "INFO Finished UNMATCHED (input_type = (2)))"

elif [[ $INPUT_TYPE == 'pedmatch' ]]
then
  doLog "INFO Processing PEDMATCH (input_type = (3))"
  if pedmatch_result=$(java ${java_opts} {{ profile_opts }} ${parser_opts} -jar {{ ars_parser_run_dir }}/275generation.jar -i3)
  then
    urc="$?"
    doLog "INFO Parsing PEDMATCH exited with ${urc}, continue processing"
  else
    urc="$?"
    doLog "${pedmatch_result}"
    doLog "ERROR Parsing PEDMATCH failed with ${urc}, stop further processing, see ${LOGGER_PATH}"
    subject="ERROR Parsing PEDMATCH "
    body="ERROR Parsing PEDMATCH failed with ${urc}, stop further processing, see ${LOGGER_PATH}"
    doLog "INFO send mail to ${mail_to}"
    echo -e "Subject:${subject}\n${body}" | sendmail -f "${mail_from}" -t "${mail_to}"
    exit $urc
  fi
  doLog "INFO Finished PEDMATCH (input_type = (3)))"

elif [[ $INPUT_TYPE == 'help' ]]
then
  doLog "INFO Get Help for parser args"
  if help_result=$(java ${java_opts} {{ profile_opts }} ${parser_opts} -jar {{ ars_parser_run_dir }}/275generation.jar -h)
  then
    hrc="$?"
    doLog "${help_result}"
    doLog "INFO Get parser help exited with ${hrc}"
  else
    hrc="$?"
    doLog "${help_result}"
    doLog "ERROR  parser help failed with ${hrc}, stop further processing, see ${LOGGER_PATH}"
    exit $hrc
  fi
else
  doLog "INFO ${INPUT_TYPE} not valid"
  exit 1
fi
