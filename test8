import boto3
from datetime import datetime, timezone

def lambda_handler(event, context):
    sqs_client = boto3.client('sqs', region_name='us-gov-west-1')
    queue_url = 'https://sqs.us-gov-west-1.amazonaws.com/412819066487/project-ped-test-834-eligibility-plus-incoming.fifo'
    target_date = datetime(2025, 7, 8, tzinfo=timezone.utc)  # Change to the desired date
    target_date_str = target_date.strftime('%Y-%m-%d')

    num_deleted = 0

    while True:
        messages = receive_messages(sqs_client, queue_url)
        if not messages:
            # No more messages to process
            break

        for message in messages:
            receipt_handle = message['ReceiptHandle']
            attributes = message.get('Attributes', {})
            sent_timestamp_ms = int(attributes.get('SentTimestamp', 0))
            sent_timestamp = datetime.fromtimestamp(sent_timestamp_ms / 1000.0, timezone.utc)
            
            if sent_timestamp.strftime('%Y-%m-%d') == target_date_str:
                sqs_client.delete_message(
                    QueueUrl=queue_url,
                    ReceiptHandle=receipt_handle
                )
                print(f"Deleted message sent at {sent_timestamp}")
                num_deleted += 1

    return {
        "statusCode": 200,
        "body": f"Deleted {num_deleted} messages sent on {target_date_str}"
    }

def receive_messages(sqs_client, queue_url):
    response = sqs_client.receive_message(
        QueueUrl=queue_url,
        MaxNumberOfMessages=10,  # SQS allows a maximum of 10 messages per request
        VisibilityTimeout=30,    # Set visibility timeout as needed
        WaitTimeSeconds=0,       # Poll immediately
        AttributeNames=['All']   # Include all attributes, including timestamps
    )
    return response.get('Messages', [])

